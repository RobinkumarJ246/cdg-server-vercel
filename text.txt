const express = require('express');
const { MongoClient, ServerApiVersion } = require('mongodb');
const nodemailer = require('nodemailer');

const app = express();
const cors = require('cors');
const crypto = require('crypto');  // To generate random verification code

app.use(express.json()); // Parse JSON request bodies
app.use(cors());

// Generate random verification code
const generateVerificationCode = () => {
  return crypto.randomBytes(3).toString('hex').toUpperCase();  // Generates a 6-character hex code
};

// MongoDB connection setup
const uri = "mongodb+srv://admin4321:iceberginflorida@cluster0.7nzmtv3.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  }
});

// Register route
app.post('/api/register', async (req, res) => {
  try {
    await client.connect();
    const database = client.db('chatdatagen');
    const auth = database.collection('auth');

    // Check if user with provided email already exists
    const existingUser = await auth.findOne({ email: req.body.email });
    if (existingUser) {
      return res.status(400).json({ message: 'Email already exists. Please login instead.' });
    }

    // Insert the user's registration data into the 'auth' collection
    const result = await auth.insertOne(req.body);

    // Generate a 6-digit verification code
    const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();

    // Store the verification code with the email and expiration time
    const expirationTime = new Date();
    expirationTime.setMinutes(expirationTime.getMinutes() + 10); // Expires in 10 minutes

    const emailvcodes = database.collection('emailvcodes');
    await emailvcodes.insertOne({
      email: req.body.email,
      code: verificationCode,
      expiresAt: expirationTime,
    });

    // Send the verification code via email
    const subject = 'Email Verification Code';
    const htmlContent = `
      <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Email Verification Code</title>
      </head>
      <body style="font-family: Arial, sans-serif;">
        <header style="background-color: #f0f0f0; padding: 20px;">
          <h1 style="margin: 0; color: #333;">Email Verification Code</h1>
        </header>
        <section style="padding: 20px;">
          <p>Hello ${req.body.userName},</p>
          <p>Your verification code is: <strong>${verificationCode}</strong></p>
          <p>Please use this code to verify your email address within the next 10 minutes.</p>
          <p>If you didnt request the code, please ignore this email</p>
        </section>
        <footer style="background-color: #f0f0f0; padding: 20px; text-align: center;">
          <p style="margin: 0;">Best regards,<br> Innovatexcel team</p>
        </footer>
      </body>
    `;

    sendCustomEmail(req.body.email, subject, htmlContent);

    res.status(200).json({ message: 'Registration successful', insertedId: result.insertedId });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred during registration' });
  } finally {
    await client.close();
  }
});

// Validate verification code
app.post('/api/validate-verification-code', async (req, res) => {
  try {
    await client.connect();
    const database = client.db('chatdatagen');
    const emailvcodes = database.collection('emailvcodes');
    const auth = database.collection('auth');

    const { email, code } = req.body;

    // Find the verification code from the database
    const verification = await emailvcodes.findOne({ email, code });

    if (!verification || new Date() > new Date(verification.expiresAt)) {
      return res.status(400).json({ error: 'Invalid or expired verification code' });
    }

    // Update the 'verifiedEmail' field to true in the 'auth' collection
    await auth.updateOne({ email }, { $set: { verifiedEmail: true } });

    res.status(200).json({ message: 'Email verification successful' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred while validating the verification code' });
  } finally {
    await client.close();
  }
});

// Nodemailer transporter setup
const transporter = nodemailer.createTransport({
  service: 'gmail',
  host: 'smtp.gmail.com',
  port: 465,
  secure: true,
  auth: {
    user: 'innovatexcel.team@gmail.com', // Your email address
    pass: 'bbyw zbva omrb tche', // Your email password or app-specific password if using Gmail
  },
});

// Function to send custom email
const sendCustomEmail = (toEmail, subject, htmlContent) => {
  // Email options
  const mailOptions = {
    from: 'innovatexcel.team@gmail.com', // Sender address
    to: toEmail, // Recipient address
    subject: subject, // Subject line
    html: htmlContent, // HTML content
  };

  // Send email
  transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
      console.error('Error sending email:', error);
    } else {
      console.log('Email sent:', info.response);
    }
  });
};

// Define route for sending email
app.post('/api/welcome-mail', (req, res) => {
  try {
    const { toEmail, subject, htmlContent } = req.body;
    console.log('Request body:', req.body); // Log the request body

    // Send the email
    sendCustomEmail(toEmail, subject, htmlContent);

    // Respond with a success message
    res.status(200).json({ message: 'Email sent successfully' });
  } catch (err) {
    console.error('Error sending welcome email:', err);
    res.status(500).json({ error: 'An error occurred while sending the welcome email' });
  }
});

// Define route for PING
app.all('/api/ping', (req, res) => {
  try {
  res.status(200).json({ message: '200 OK' });
  } catch (err) {
    console.error('Error:', err);
    res.status(500).json({ error: 'An error occurred while pinging' });
  }
});

// Define route for HEAD PING
app.head('/api/ping', (req, res) => {
  try {
      res.status(200).end();  // End the response without sending any content
  } catch (err) {
      console.error('Error:', err);
      res.status(500).json({ error: 'An error occurred while pinging' });
  }
});

// Get username route
app.get('/api/getUsername/:email', async (req, res) => {
  try {
    const userEmail = req.params.email;
    
    await client.connect();
    const database = client.db('chatdatagen');
    const auth = database.collection('auth');

    // Find the user with the provided email in the 'auth' collection
    const user = await auth.findOne({ email: userEmail });

    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    // Send the username
    res.status(200).json({ username: user.userName });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred while fetching the username' });
  } finally {
    await client.close();
  }
});

// Login route
app.post('/api/login', async (req, res) => {
  try {
    await client.connect();
    const database = client.db('chatdatagen');
    const auth = database.collection('auth');

    // Find the user in the 'auth' collection
    const user = await auth.findOne({ email: req.body.email });

    if (!user) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }

    // Check if the provided password matches the stored password
    if (user.password !== req.body.password) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }

    // Authentication successful
    res.status(200).json({ message: 'Login successful' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred during login' });
  } finally {
    await client.close();
  }
});

// Save room details route
app.post('/api/save-room', async (req, res) => {
  try {
    await client.connect();
    const database = client.db('chatdatagen');
    const rooms = database.collection('rooms');

    // Extract room details from request body
    const { roomCode, roomName, password, email } = req.body;

    // Create the room document
    const result = await rooms.insertOne({
      roomCode,
      roomName,
      password,
      owner: email,
      onlineUsers: [email]  // Initial onlineUsers array with owner email
    });

    res.status(200).json({ message: 'Room details saved successfully', insertedId: result.insertedId });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred while saving the room details' });
  } finally {
    await client.close();
  }
});


let onlineUsers = {};

// Join room route
app.post('/api/join-room', async (req, res) => {
  try {
    const { roomCode, userEmail } = req.body;
    await client.connect();
    const database = client.db('chatdatagen');
    const rooms = database.collection('rooms');

    // Find the room in the 'rooms' collection
    const room = await rooms.findOne({ roomCode });

    if (!room) {
      return res.status(404).json({ error: 'Room not found' });
    }

    // Update online users
    if (!onlineUsers[roomCode]) {
      onlineUsers[roomCode] = [];
    }
    onlineUsers[roomCode].push(userEmail);

    // Room validation successful
    res.status(200).json({ message: 'Room joined successfully', onlineUsers: onlineUsers[roomCode] });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred during room joining' });
  } finally {
    await client.close();
  }
});

// Leave room route
app.post('/api/leave-room', async (req, res) => {
  try {
    const { roomCode, userEmail } = req.body;

    // Remove user from online users
    if (onlineUsers[roomCode]) {
      onlineUsers[roomCode] = onlineUsers[roomCode].filter(user => user !== userEmail);
    }

    res.status(200).json({ message: 'Left the room successfully' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred while leaving the room' });
  }
});

// Check room authentication route
app.get('/api/check-auth/:roomCode', async (req, res) => {
  try {
    await client.connect();
    const database = client.db('chatdatagen');
    const rooms = database.collection('rooms');

    // Find the room with the provided room code
    const room = await rooms.findOne({ roomCode: req.params.roomCode });

    if (!room) {
      return res.status(404).json({ error: 'Room not found' });
    }

    // Check if the user is authenticated
    if (!req.headers.authorization || req.headers.authorization !== room.password) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    // Authentication successful
    res.status(200).json({ message: 'Authentication successful' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred during authentication' });
  } finally {
    await client.close();
  }
});

// Get online users in a room route
app.get('/api/online-users/:code', (req, res) => {
  try {
    const code = req.params.code;
    
    if (!onlineUsers[code]) {
      onlineUsers[code] = [];
    }

    res.status(200).json({ onlineUsers: onlineUsers[code] });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred while fetching online users' });
  }
});

let chatRooms = {};
/*
// Send message route
app.post('/api/send-message', async (req, res) => {
  try {
    await client.connect();
    const database = client.db('chatdatagen');
    const rooms = database.collection('rooms');

    const { roomCode, sender, message } = req.body;

    // Check if room exists
    const room = await rooms.findOne({ roomCode });

    if (!room) {
      return res.status(404).json({ error: 'Room not found' });
    }

    // Add message to the room
    if (!room.msgdata) {
      room.msgdata = [];
    }

    room.msgdata.push({ sender, content: message });

    // Update the room with the new message
    await rooms.updateOne({ roomCode }, { $set: { msgdata: room.msgdata } });

    res.status(200).json({ message: 'Message sent successfully' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred while sending the message' });
  } finally {
    await client.close();
  }
});

// New route to fetch chat messages for a room
app.get('/api/get-messages/:code', async (req, res) => {
  try {
    const code = req.params.code;
    
    await client.connect();
    const database = client.db('chatdatagen');
    const rooms = database.collection('rooms');

    // Find the room with the provided room code
    const room = await rooms.findOne({ roomCode: code });

    if (!room || !room.msgdata) {
      return res.status(404).json({ error: 'No messages found for this room' });
    }

    res.status(200).json({ messages: room.msgdata });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred while fetching messages' });
  } finally {
    await client.close();
  }
}); */

// Generate and send verification code
app.post('/api/send-verification-code', async (req, res) => {
  try {
    const { email } = req.body;

    // Generate a 6-digit verification code
    const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();

    // Store the verification code with the email and expiration time
    const expirationTime = new Date();
    expirationTime.setMinutes(expirationTime.getMinutes() + 10); // Expires in 10 minutes

    const emailvcodes = database.collection('emailvcodes');
    await emailvcodes.insertOne({
      email: email,
      code: verificationCode,
      expiresAt: expirationTime,
    });

    // Send the verification code via email
    const subject = 'Email Verification Code';
    const htmlContent = `
      <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Email Verification Code</title>
      </head>
      <body style="font-family: Arial, sans-serif;">
        <header style="background-color: #f0f0f0; padding: 20px;">
          <h1 style="margin: 0; color: #333;">Email Verification Code</h1>
        </header>
        <section style="padding: 20px;">
          <p>Hello,</p>
          <p>Your verification code is: <strong>${verificationCode}</strong></p>
          <p>Please use this code to verify your email address within the next 10 minutes.</p>
        </section>
        <footer style="background-color: #f0f0f0; padding: 20px; text-align: center;">
          <p style="margin: 0;">Best regards,<br> Innovatexcel team</p>
        </footer>
      </body>
    `;

    sendCustomEmail(email, subject, htmlContent);

    res.status(200).json({ message: 'Verification code sent successfully' });
  } catch (err) {
    console.error('Error sending verification code:', err);
    res.status(500).json({ error: 'An error occurred while sending the verification code' });
  }
});

const PORT = process.env.PORT || 3000; // Use environment variable or fallback to 3000
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

This is my index.js of my server which has the api endpoints. I want to implement web sockets in my next.js for the real time messaging. The messages must be saved in the database that is already present ('chatdatagen') and in collection 'rooms' in a field called 'msgdata' (create new field if not already present or else update the field (for new messages)). The msgdata field will have the keys sender and the message as the value and key reply and the message as its value. This is to make it easier to get the msgdata in JSON format from the database.

// pages/rooms/[roomCode].js
'use client'
import { useRouter, useSearchParams, useParams } from 'next/navigation';
import { useState, useEffect } from 'react';
import axios from 'axios';

const RoomPage = () => {
    const searchParams = useSearchParams();
    const roomCode = searchParams.get('roomCode');
    const { code } = useParams();
    const router = useRouter();
    const [messages, setMessages] = useState([]);
    const [userInput, setUserInput] = useState('');
    const [showOptions, setShowOptions] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [authError, setAuthError] = useState('');
    const [onlineUsers, setOnlineUsers] = useState([]);
    const [isOnlineListOpen, setIsOnlineListOpen] = useState(false);
    const [isTypingAllowed, setIsTypingAllowed] = useState(false);
    const [isSender, setIsSender] = useState(true);

    useEffect(() => {
        const checkAuthentication = async () => {
            try {
                const response = await axios.get(`https://cdg-server-v2.onrender.com/api/check-auth/${code}`, {
                    headers: {
                        Authorization: localStorage.getItem('password')
                    }
                });
                if (response.status !== 200) {
                    router.push('/join_room');
                } else {
                    setIsLoading(false);
                }
            } catch (error) {
                if (error.response && error.response.status === 401) {
                    setAuthError('(401: UNAUTHORIZED)\nYou are not authorized to access this room');
                    setIsLoading(false);
                } else if (error.response && error.response.status === 404) {
                    setAuthError('ERROR 404');
                    setIsLoading(false);
                } else {
                    setAuthError('Error checking room authenticity. Please try again.');
                    setIsLoading(false);
                }
            }
        };

        const fetchOnlineUsers = async () => {
            try {
                const response = await axios.get(`https://cdg-server-v2.onrender.com/api/online-users/${code}`);
                setOnlineUsers(response.data.onlineUsers);
            } catch (error) {
                console.error('Error fetching online users:', error);
            }
        };

        //checkAuthentication();
        //fetchOnlineUsers();

        const interval = setInterval(fetchOnlineUsers, 10000);

        return () => clearInterval(interval);
    }, [code, router]);

    const handleInputChange = (e) => {
        setUserInput(e.target.value);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (userInput.trim() !== '') {
            const newUserMessage = { sender: isSender ? localStorage.getItem('email') : onlineUsers.find(user => user !== localStorage.getItem('email')), message: userInput.trim() };
            const newMessages = [...messages, newUserMessage];
            setMessages(newMessages);
            setUserInput('');

            try {
                const response = await axios.post(`https://cdg-server-v2.onrender.com/api/send-message`, {
                    roomCode: code,
                    sender: isSender ? localStorage.getItem('email') : onlineUsers.find(user => user !== localStorage.getItem('email')),
                    message: userInput.trim(),
                    reply: isSender ? null : userInput.trim(),
                });
                console.log(response.data);
            } catch (error) {
                console.error('Error sending message:', error);
            }

            setIsTypingAllowed(!isSender);
            setIsSender(!isSender);
        }
    };

    const toggleOptions = () => {
        setShowOptions(!showOptions);
    };

    const toggleOnlineList = () => {
        setIsOnlineListOpen(!isOnlineListOpen);
    };

    const handleOptionClick = (option) => {
        switch (option) {
            case 'changeRoomName':
                break;
            case 'copyRoomCode':
                navigator.clipboard.writeText(localStorage.getItem('roomCode'));
                alert('Room code copied to clipboard!');
                break;
            case 'downloadData':
                break;
            case 'deleteRoom':
                break;
            default:
                break;
        }
        setShowOptions(false);
    };

    /*if (isLoading) {
        return <p>Please wait while we check your room authenticity...</p>;
    }*/

    if (authError) {
        return <p>{authError}</p>;
    }

    return (
        <div className="flex flex-col h-screen">
            <div className="bg-gray-800 text-white p-4 flex justify-between items-center">
                <h2 className="text-xl">Chatting Portal (Room Code: {localStorage.getItem('roomCode')})</h2>
                <div className="flex items-center space-x-4">
                    <div className="relative">
                        <button onClick={toggleOnlineList} className="bg-blue-500 px-4 py-2 rounded-full">
                            Online: {onlineUsers.length}
                        </button>
                        {isOnlineListOpen && (
                            <div className="absolute top-full bg-white shadow-lg rounded w-48 mt-2">
                                {onlineUsers.map((user, index) => (
                                    <div key={index} className="px-4 py-2 hover:bg-gray-200">
                                        {user === localStorage.getItem('email') ? `${user} (You)` : user}
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                    <div className="relative">
                        <button onClick={toggleOptions} className="bg-blue-500 px-4 py-2 rounded-full">
                            Options
                        </button>
                        {showOptions && (
                            <div className="absolute top-full bg-white shadow-lg rounded w-48 mt-2">
                                <button onClick={() => handleOptionClick('changeRoomName')} className="block w-full px-4 py-2 hover:bg-gray-200">Change Room Name</button>
                                <button onClick={() => handleOptionClick('copyRoomCode')} className="block w-full px-4 py-2 hover:bg-gray-200">Copy Room Code</button>
                                <button onClick={() => handleOptionClick('downloadData')} className="block w-full px-4 py-2 hover:bg-gray-200">Download Chat Data</button>
                                <button onClick={() => handleOptionClick('deleteRoom')} className="block w-full px-4 py-2 hover:bg-gray-200">Delete Room</button>
                            </div>
                        )}
                    </div>
                </div>
            </div>
            <div className="flex-1 overflow-y-auto p-4 bg-gray-200">
                {messages.map((msg, index) => (
                    <div key={index} className={`my-2 p-2 rounded ${msg.sender === localStorage.getItem('email') ? 'bg-blue-500 self-start' : 'bg-gray-700 self-end'} text-white`}>
                        <span className="font-bold mr-2">{msg.sender}</span>
                        <span>{msg.message}</span>
                    </div>
                ))}
            </div>
            <div className="p-4 bg-white shadow-md">
                <form onSubmit={handleSubmit} className="flex">
                    <input
                        type="text"
                        placeholder={isTypingAllowed ? (isSender ? "Type your message..." : "Waiting for response...") : "Waiting for response..."}
                        disabled={!isTypingAllowed}
                        value={userInput}
                        onChange={handleInputChange}
                        className="flex-1 p-2 border rounded mr-2"
                    />
                    <button type="submit" disabled={!isTypingAllowed} className="bg-blue-500 text-white px-4 py-2 rounded">Send</button>
                </form>
            </div>
        </div>
    );
    
};
export default RoomPage;

this is my client page code. When users clicks send button (submit) the messages are saved in the database like i have said using websocket connection, instead of using the API which is in this code.

i should easily get the msg like

[
    [
        {
            "msg":"hello",
            "reply":"hey hi"
        },
        {
            "msg":"how are you",
            "reply":"i am fine"
        }
    ]
]